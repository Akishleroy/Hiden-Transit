// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
export const formatDate = (dateString: string): string => {
  if (!dateString) return '‚Äî';
  
  try {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  } catch {
    return dateString;
  }
};

export const formatDateTime = (dateString: string): string => {
  if (!dateString) return '‚Äî';
  
  try {
    return new Date(dateString).toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return dateString;
  }
};

export const formatDateShort = (dateString: string): string => {
  if (!dateString) return '‚Äî';
  
  try {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: 'short'
    });
  } catch {
    return dateString;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
export const formatWeight = (weight: number): string => {
  if (weight == null) return '‚Äî';
  return weight.toLocaleString('ru-RU');
};

export const formatNumber = (num: number): string => {
  if (num == null) return '‚Äî';
  return num.toLocaleString('ru-RU');
};

export const formatCurrency = (amount: number, currency: string = 'RUB'): string => {
  if (amount == null) return '‚Äî';
  
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
};

export const formatPercent = (value: number, total: number): string => {
  if (value == null || total == null || total === 0) return '0%';
  return `${((value / total) * 100).toFixed(1)}%`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–æ–≤ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏
export const formatWeightWithUnit = (weight: number): string => {
  if (weight == null) return '‚Äî';
  
  if (weight >= 1000000) {
    return `${(weight / 1000000).toFixed(1)} —Ç`;
  } else if (weight >= 1000) {
    return `${(weight / 1000).toFixed(1)} —Ç`;
  } else {
    return `${weight} –∫–≥`;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤–µ—Å–æ–≤
export const formatWeightDifference = (importWeight: number, exportWeight: number): string => {
  if (importWeight == null || exportWeight == null) return '‚Äî';
  
  const diff = Math.abs(importWeight - exportWeight);
  const percentage = importWeight > 0 ? (diff / importWeight) * 100 : 0;
  
  if (diff === 0) return '–°–æ–≤–ø–∞–¥–∞–µ—Ç';
  
  const sign = exportWeight > importWeight ? '+' : '-';
  return `${sign}${formatWeight(diff)} –∫–≥ (${percentage.toFixed(1)}%)`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID –∑–∞–ø–∏—Å–µ–π
export const formatRecordId = (id: number): string => {
  if (id == null) return '‚Äî';
  return id.toString().padStart(8, '0');
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –≤–∞–≥–æ–Ω–æ–≤
export const formatWagonNumber = (number: string): string => {
  if (!number) return '‚Äî';
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  return number.replace(/(\d{4})(\d{4})/, '$1 $2');
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
export const formatRoute = (departure: string, destination: string): string => {
  if (!departure || !destination) return '‚Äî';
  return `${departure} ‚Üí ${destination}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π
export const formatStationRoute = (departure: string, transfer: string, destination: string): string => {
  const stations = [departure, transfer, destination].filter(Boolean);
  return stations.join(' ‚Üí ') || '‚Äî';
};

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
export const getProbabilityCategoryClass = (category: string): string => {
  switch (category) {
    case '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-red-100 text-red-800 border-red-200';
    case '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-orange-100 text-orange-800 border-orange-200';
    case '–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    case '–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-blue-100 text-blue-800 border-blue-200';
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–æ–º–∞–ª–∏–π
export const getAnomalyProbabilityClass = (probability: string): string => {
  switch (probability) {
    case 'high':
      return 'bg-red-100 text-red-800 border-red-200';
    case 'elevated':
      return 'bg-orange-100 text-orange-800 border-orange-200';
    case 'medium':
      return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    case 'low':
      return 'bg-green-100 text-green-800 border-green-200';
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
export const getAnomalyTypeClass = (type: string): string => {
  switch (type) {
    case 'weight_anomaly':
      return 'bg-purple-100 text-purple-800 border-purple-200';
    case 'time_anomaly':
      return 'bg-indigo-100 text-indigo-800 border-indigo-200';
    case 'route_anomaly':
      return 'bg-pink-100 text-pink-800 border-pink-200';
    case 'duplicate_anomaly':
      return 'bg-cyan-100 text-cyan-800 border-cyan-200';
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
export const getAnomalyTypeName = (type: string): string => {
  switch (type) {
    case 'weight_anomaly':
      return '–ê–Ω–æ–º–∞–ª–∏—è –≤–µ—Å–∞';
    case 'time_anomaly':
      return '–ê–Ω–æ–º–∞–ª–∏—è –≤—Ä–µ–º–µ–Ω–∏';
    case 'route_anomaly':
      return '–ê–Ω–æ–º–∞–ª–∏—è –º–∞—Ä—à—Ä—É—Ç–∞';
    case 'duplicate_anomaly':
      return '–î—É–±–ª–∏–∫–∞—Ç';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è';
  }
};

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
export const getTableRowClass = (probabilityCategory: string): string => {
  switch (probabilityCategory) {
    case '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-red-50 hover:bg-red-100 border-l-4 border-red-500';
    case '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-orange-50 hover:bg-orange-100 border-l-4 border-orange-500';
    case '–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-yellow-50 hover:bg-yellow-100 border-l-4 border-yellow-500';
    case '–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å':
      return 'bg-green-50 hover:bg-green-100 border-l-4 border-green-500';
    default:
      return 'hover:bg-gray-50';
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–Ω–æ–º–∞–ª–∏–∏
export const getAnomalyTypeIcon = (type: string): string => {
  switch (type) {
    case 'weight_anomaly':
      return '‚öñÔ∏è';
    case 'time_anomaly':
      return '‚è∞';
    case 'route_anomaly':
      return 'üõ£Ô∏è';
    case 'duplicate_anomaly':
      return 'üìã';
    default:
      return '‚ö†Ô∏è';
  }
};

// –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω
export const getCountryName = (code: string): string => {
  const countries: Record<string, string> = {
    'RU': '–†–æ—Å—Å–∏—è',
    'KZ': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    'CN': '–ö–∏—Ç–∞–π',
    'MN': '–ú–æ–Ω–≥–æ–ª–∏—è',
    'UZ': '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω',
    'KG': '–ö–∏—Ä–≥–∏–∑–∏—è',
    'TJ': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω',
    'AM': '–ê—Ä–º–µ–Ω–∏—è',
    'GE': '–ì—Ä—É–∑–∏—è',
    'AZ': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω',
    'BY': '–ë–µ–ª–∞—Ä—É—Å—å',
    'UA': '–£–∫—Ä–∞–∏–Ω–∞'
  };
  
  return countries[code] || code;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
export const isHighProbabilityRecord = (record: any): boolean => {
  return record.probability_category === '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å' || 
         record.anomalies?.some((a: any) => a.probability === 'high');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
export const getRecordPriority = (record: any): number => {
  if (record.probability_category === '–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å') return 4;
  if (record.probability_category === '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å') return 3;
  if (record.probability_category === '–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å') return 2;
  if (record.probability_category === '–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å') return 1;
  return 0;
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–∞
export const isValidWagonNumber = (number: string): boolean => {
  if (!number) return false;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
  return /^\d{8}$/.test(number.replace(/\s/g, ''));
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
export const formatExecutionTime = (milliseconds: number): string => {
  if (milliseconds < 1000) {
    return `${milliseconds}–º—Å`;
  } else {
    return `${(milliseconds / 1000).toFixed(1)}—Å`;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 –ë';
  
  const k = 1024;
  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
};